// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next-Auth START
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String? // New Column
  password      String? // for credentials provider
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Next-Auth END

model Product {
  id               String             @id @default(uuid())
  name             String
  description      String
  categoryId       String
  category         Category           @relation(fields: [categoryId], references: [id])
  ProductVariation ProductVariation[]
}

model ProductVariation {
  id       String  @id @default(uuid())
  name     String?
  price    Float
  quantity Int
  SKU      String

  productId                     String
  Product                       Product                         @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductVariationFilterOptions ProductVariationFilterOptions[]
}

model Category {
  id       String     @id @default(uuid())
  name     String
  Product  Product[]
  // self-relation
  parentId String?
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  Filter   Filter[]
}

model Filter {
  id           String         @id @default(uuid())
  name         String
  categoryId   String
  category     Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  FilterOption FilterOption[]
}

model FilterOption {
  id                            String                          @id @default(uuid())
  option_value                  String
  filterId                      String
  Filter                        Filter                          @relation(fields: [filterId], references: [id], onDelete: Cascade)
  ProductVariationFilterOptions ProductVariationFilterOptions[]
}

// explicit many-to-many relationship
model ProductVariationFilterOptions {
  id                 String           @id @default(uuid())
  productVariationId String
  productVariation   ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: Cascade)
  filterOptionId     String
  filterOption       FilterOption     @relation(fields: [filterOptionId], references: [id], onDelete: Cascade)
}
